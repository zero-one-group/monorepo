# https://moonrepo.dev/docs/config/project
# yaml-language-server: $schema=https://moonrepo.dev/schemas/project.json
$schema: "https://moonrepo.dev/schemas/project.json"

type: application
language: go
toolchain:
  default: null
stack: backend
tags: ["app", "backend"]

# Overrides the name (identifier) of the project
id: "go-app"

project:
  name: "go-app"
  description: "My backend application"

tasks:
  dev:
    command: "air -c air.toml"
    deps: [kill-port]
    options:
      envFile: "/.env"

  build:
    command: "go build -o build/go-app"
    outputs: ["build/go-app"]
    deps: [tidy]

  start:
    command: "build/go-app"

  test:
    command: "go test ./... -count=1"
    deps: ["tidy", "generate-mock"]
    options:
      cache: false

  fmt:
    command: "gofmt -s -w ."
    options:
      cache: false

  generate-mock:
    command: "mockery"
    options:
      cache: false

  tidy:
    command: "go mod tidy"

  kill-port:
    # This is a hack for killing the listen port before starting the app
    command: "pnpm --package=kill-port-process-cli dlx kill-port 8000"
    deps: [tidy]
    options:
      internal: true

  migration-create:
    command: "go run ./cmd/ migrate create"

  migration-up:
    command: "go run ./cmd/ migrate up"

  migration-down:
    command: "go run ./cmd/ migrate down"

  migration-reset:
    command: "go run ./cmd/ migrate reset"

  migration-version:
    command: "go run ./cmd/ migrate version"

  seed:
    command: "go run ./cmd/ seed"

  install-mockery:
    command: "../../.moon/scripts/install_mockery.sh v3.5.1"
    options:
      shell: true
      runInCI: false
      cache: false

  generate-swagger:
    command: "swag init -o docs --parseDependency"
    options:
      cache: false

  docker-build:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker build -f $projectRoot/Dockerfile . -t $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION \
      && docker image list --filter reference=$DOCKER_IMAGE\*
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      interactive: false
      outputStyle: buffer-only-failure
      runInCI: false
      cache: false
      shell: true

  docker-run:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker run --network=host --rm -it --env-file $projectRoot/.env \
        --name $DOCKER_IMAGE $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      outputStyle: buffer-only-failure
      runFromWorkspaceRoot: true
      interactive: false
      runInCI: false
      cache: false
      shell: true

  docker-shell:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker run --network=host --rm -it --env-file $projectRoot/.env \
        --entrypoint /bin/sh $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      outputStyle: buffer-only-failure
      interactive: false
      runInCI: false
      cache: false
      shell: true
