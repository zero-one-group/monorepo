# https://moonrepo.dev/docs/config/project
# yaml-language-server: $schema=https://moonrepo.dev/schemas/project.json
$schema: 'https://moonrepo.dev/schemas/project.json'

type: application
language: typescript
stack: frontend
tags: ['app']

# Overrides the name (identifier) of the project
id: 'react-app'

project:
  name: react-app
  description: '_CHANGE_ME_DESCRIPTION_'

# Uncomment to use shared UI library
# dependsOn:
#   - 'shared-ui'

# Since this project can infer task from script (package.json), then you can run any script as moon task.
# @see: https://moonrepo.dev/api/types/interface/NodeConfig#inferTasksFromScripts
# Example: `moon react-app:start`
tasks:
  dev:
    command: 'pnpm run dev'
    deps: ['prebuild']
    options:
      runDepsInParallel: false
      envFile: '.env'

  build:
    command: 'pnpm run build'
    deps: ['prebuild']
    options:
      runDepsInParallel: false
      cache: true

  typecheck:
    command: 'pnpm run typecheck'
    deps: ['prebuild']
    options:
      cache: true

  prebuild:
    deps: ['shared-ui:build', 'typegen']
    options:
      cache: true

  docker-build:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker build -f $projectRoot/Dockerfile . -t $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION \
      && docker image list --filter reference=$DOCKER_IMAGE\*
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      interactive: false
      outputStyle: buffer-only-failure
      runInCI: false
      cache: false
      shell: true

  docker-run:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker run --network=host --rm -it --env-file $projectRoot/.env \
        --name $DOCKER_IMAGE $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      outputStyle: buffer-only-failure
      runFromWorkspaceRoot: true
      interactive: false
      runInCI: false
      cache: false
      shell: true

  docker-shell:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker run --network=host --rm -it --env-file $projectRoot/.env \
        --entrypoint /bin/sh $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      outputStyle: buffer-only-failure
      interactive: false
      runInCI: false
      cache: false
      shell: true
