package repository

import (
	"context"
	"errors"
	"log/slog"

	"github.com/jackc/pgx/v5/pgxpool"
	"go-modular/modules/dummy/models"
)

// Sentinel error for not found
var ErrNotFound = errors.New("not found")

// DummyRepositoryInterface defines the contract for dummy data access.
type DummyRepositoryInterface interface {
	Hello(ctx context.Context, message *models.Message) (*models.Message, error)
}

// Ensure DummyRepository implements DummyRepositoryInterface
var _ DummyRepositoryInterface = (*DummyRepository)(nil)

// DummyRepository is an implementation of DummyRepositoryInterface using pgxpool.
type DummyRepository struct {
	pgPool *pgxpool.Pool
	logger *slog.Logger
}

// NewDummyRepository creates a new DummyRepository with pgxpool and slog logger.
func NewDummyRepository(pgPool *pgxpool.Pool, logger *slog.Logger) *DummyRepository {
	return &DummyRepository{
		pgPool: pgPool,
		logger: logger,
	}
}

func (r *DummyRepository) Hello(ctx context.Context, message *models.Message) (*models.Message, error) {
	if message == nil {
		return nil, ErrNotFound
	}
	r.logger.Info("DummyRepository Hello", "message", message)
	return message, nil
}
