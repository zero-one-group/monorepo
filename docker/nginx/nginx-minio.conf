server {
    listen    127.0.0.1:80;
    server_name  localhost;
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}

server {
    listen 8010;
    server_name localhost;

    access_log /var/log/nginx/minio-access.log main;
    error_log /var/log/nginx/minio-error.log warn;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-Content-Type-Options "nosniff";
    add_header X-Xss-Protection "1; mode=block";
    add_header Referrer-Policy strict-origin-when-cross-origin;
    add_header Strict-Transport-Security "max-age=15552000; includeSubDomains;preload";
    add_header X-Robots-Tag 'noindex, nofollow, nosnippet, noarchive';

    # Uncomment to enable HTTPS support
    # listen 443 ssl http2;
    # ssl_certificate /etc/letsencrypt/live/cdn.example.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/cdn.example.com/privkey.pem;
    # if ($scheme = http) {return 301 https://$host$request_uri;}

    # Disable log for robots.txt
    location = /robots.txt  {
        log_not_found off;
        access_log off;
        allow all;
    }

    # Disable log for well-known
    location ~ \.well-known {
        log_not_found off;
        access_log off;
        allow all;
    }

    # Global restriction
    location ~ \.(htaccess|htpasswd|db|yml|yaml|log|svn|git|twig|cfg|conf|sql|ini|toml|tpl)$ {
        return 444;
    }

    # Reverse proxy Handler
    location / {
        rewrite ^/$ /devbucket/index.html break;
        proxy_pass http://minio:9100/devbucket/;
        proxy_set_header Host $http_host;

        # Additional headers to pass to the backend server
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_hide_header X-Powered-By;
        proxy_redirect off;
        proxy_hide_header Vary;
        proxy_set_header Referer $http_referer;
        proxy_set_header Cookie $http_cookie;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_pass_header Set-Cookie;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Request-URI $request;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_cache_bypass $http_upgrade;
        proxy_buffering off;
    }
}
