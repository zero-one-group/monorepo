# https://moonrepo.dev/docs/config/project
# yaml-language-server: $schema=https://moonrepo.dev/schemas/project.json
$schema: "https://moonrepo.dev/schemas/project.json"

type: library
language: python
tags: ["app"]

# Overrides the name (identifier) of the project
id: "{{ package_name | kebab_case }}"

project:
  name: "{{ package_name | kebab_case }}"
  description: "{{ package_description }}"

# Since this project can infer task from script (package.json), then you can run any script as moon task.
# @see: https://moonrepo.dev/api/types/interface/NodeConfig#inferTasksFromScripts
# Example: `moon {{ package_name | kebab_case }}:start`
tasks:
  # Install and synchronize all project dependencies using uv
  sync:
    command: "uv sync"

  # Development server with hot reload
  # Starts FastAPI in development mode with automatic reloading on file changes
  # Accessible at http://localhost:{{ port_number }}
  dev:
    command: "uv run fastapi dev app/main.py --port {{ port_number }}"
    deps: ["sync"]
    options:
      envFile: ".env"

  # Production server
  # Starts FastAPI in production mode (optimized for performance)
  # Accessible at http://localhost:{{ port_number }}
  start:
    command: "uv run fastapi run app/main.py --port {{ port_number }}"
    deps: ["sync"]
    options:
      envFile: ".env"

  # Apply all pending database migrations
  # This task upgrades the database schema to the latest version
  migrate:
    command: "uv run alembic upgrade head"
    deps: ["sync"]
    options:
      envFile: ".env"

  # Create a new empty migration file
  # Usage: `moon {{ package_name | kebab_case }}:migrate-create -- "your migration description"`
  # You'll need to manually write the migration logic
  migrate-create:
    command: "uv run alembic revision -m "
    deps: ["sync"]
    options:
      envFile: ".env"

  # Auto-generate migration from model changes
  # Compares current models with database schema and creates migration automatically
  # Usage: `moon {{ package_name | kebab_case }}:migrate-autogenerate -- "migration description"`
  # ⚠️ Always review the generated migration before applying it!
  migrate-autogenerate:
    command: "uv run alembic revision --autogenerate -m "
    deps: ["sync"]
    options:
      envFile: ".env"

  # Rollback the last migration
  # Reverts the database schema by one migration step
  migrate-down:
    command: "uv run alembic downgrade -1"
    deps: ["sync"]
    options:
      envFile: ".env"

  # Reset database to initial state
  # Rolls back all migrations, returning to an empty database
  # ⚠️ This will destroy all data!
  migrate-reset:
    command: "uv run alembic downgrade base"
    deps: ["sync"]
    options:
      envFile: ".env"

  # Populate database with dummy data
  seed:
    command: "uv run python -m app.database.seeder.main"
    deps: ["sync"]
    options:
      envFile: ".env"

  # Installs dependencies, applies migrations, and seeds the database
  # Run this when setting up the project for the first time
  check-in-dance:
    command: 'echo "All is good, ready to go!"'
    deps: ["sync", "migrate", "seed"]
    options:
      envFile: ".env"
      shell: true

  docker-build:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker build -f $projectRoot/Dockerfile . -t $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION \
      && docker image list --filter reference=$DOCKER_IMAGE\*
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      interactive: false
      outputStyle: buffer-only-failure
      runInCI: false
      cache: false
      shell: true

  docker-run:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker run --network=host --rm -it --env-file $projectRoot/.env \
        --name $DOCKER_IMAGE $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      outputStyle: buffer-only-failure
      runFromWorkspaceRoot: true
      interactive: false
      runInCI: false
      cache: false
      shell: true

  docker-shell:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      && docker run --network=host --rm -it --env-file $projectRoot/.env \
        --entrypoint /bin/sh $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      outputStyle: buffer-only-failure
      interactive: false
      runInCI: false
      cache: false
      shell: true
