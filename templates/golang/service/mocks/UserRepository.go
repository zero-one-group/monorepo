// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"{{ package_name }}/domain"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type UserRepository
func (_mock *UserRepository) CreateUser(ctx context.Context, user *domain.CreateUserRequest) (*domain.User, error) {
	ret := _mock.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreateUserRequest) (*domain.User, error)); ok {
		return returnFunc(ctx, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.CreateUserRequest) *domain.User); ok {
		r0 = returnFunc(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.CreateUserRequest) error); ok {
		r1 = returnFunc(ctx, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *domain.CreateUserRequest
func (_e *UserRepository_Expecter) CreateUser(ctx interface{}, user interface{}) *UserRepository_CreateUser_Call {
	return &UserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, user)}
}

func (_c *UserRepository_CreateUser_Call) Run(run func(ctx context.Context, user *domain.CreateUserRequest)) *UserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.CreateUserRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.CreateUserRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_CreateUser_Call) Return(user1 *domain.User, err error) *UserRepository_CreateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, user *domain.CreateUserRequest) (*domain.User, error)) *UserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type UserRepository
func (_mock *UserRepository) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserRepository_Expecter) DeleteUser(ctx interface{}, id interface{}) *UserRepository_DeleteUser_Call {
	return &UserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *UserRepository_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_DeleteUser_Call) Return(err error) *UserRepository_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserRepository_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *UserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUser(ctx context.Context, id uuid.UUID) (*domain.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *UserRepository_Expecter) GetUser(ctx interface{}, id interface{}) *UserRepository_GetUser_Call {
	return &UserRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *UserRepository_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *UserRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_GetUser_Call) Return(user *domain.User, err error) *UserRepository_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *UserRepository_GetUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*domain.User, error)) *UserRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserList provides a mock function for the type UserRepository
func (_mock *UserRepository) GetUserList(ctx context.Context, filter *domain.UserFilter) ([]domain.User, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetUserList")
	}

	var r0 []domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserFilter) ([]domain.User, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.UserFilter) []domain.User); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.UserFilter) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_GetUserList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserList'
type UserRepository_GetUserList_Call struct {
	*mock.Call
}

// GetUserList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter *domain.UserFilter
func (_e *UserRepository_Expecter) GetUserList(ctx interface{}, filter interface{}) *UserRepository_GetUserList_Call {
	return &UserRepository_GetUserList_Call{Call: _e.mock.On("GetUserList", ctx, filter)}
}

func (_c *UserRepository_GetUserList_Call) Run(run func(ctx context.Context, filter *domain.UserFilter)) *UserRepository_GetUserList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.UserFilter
		if args[1] != nil {
			arg1 = args[1].(*domain.UserFilter)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *UserRepository_GetUserList_Call) Return(users []domain.User, err error) *UserRepository_GetUserList_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *UserRepository_GetUserList_Call) RunAndReturn(run func(ctx context.Context, filter *domain.UserFilter) ([]domain.User, error)) *UserRepository_GetUserList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type UserRepository
func (_mock *UserRepository) UpdateUser(ctx context.Context, id uuid.UUID, user *domain.User) (*domain.User, error) {
	ret := _mock.Called(ctx, id, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.User) (*domain.User, error)); ok {
		return returnFunc(ctx, id, user)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *domain.User) *domain.User); ok {
		r0 = returnFunc(ctx, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *domain.User) error); ok {
		r1 = returnFunc(ctx, id, user)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// UserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - user *domain.User
func (_e *UserRepository_Expecter) UpdateUser(ctx interface{}, id interface{}, user interface{}) *UserRepository_UpdateUser_Call {
	return &UserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, user)}
}

func (_c *UserRepository_UpdateUser_Call) Run(run func(ctx context.Context, id uuid.UUID, user *domain.User)) *UserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *domain.User
		if args[2] != nil {
			arg2 = args[2].(*domain.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *UserRepository_UpdateUser_Call) Return(user1 *domain.User, err error) *UserRepository_UpdateUser_Call {
	_c.Call.Return(user1, err)
	return _c
}

func (_c *UserRepository_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, user *domain.User) (*domain.User, error)) *UserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
