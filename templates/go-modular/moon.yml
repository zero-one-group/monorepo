# https://moonrepo.dev/docs/config/project
# yaml-language-server: $schema=https://moonrepo.dev/schemas/project.json
$schema: "https://moonrepo.dev/schemas/project.json"

type: application
language: go
toolchain:
  default: null
stack: backend
tags: ["core-app"]

# Overrides the name (identifier) of the project
id: "{{ package_name | kebab_case }}"

project:
  name: "{{ package_name | kebab_case }}"
  description: "{{ package_description }}"

tasks:
  dev:
    command: "watchexec -r -e go,toml -w . --no-vcs-ignore -- go run -tags debug ./cmd/"
    args: ["serve"]
    deps: [kill-port, generate-swagger]
    options:
      cache: false
      envFile: ".env"

  run:
    command: "go run -tags debug $projectRoot/cmd/"
    deps: [kill-port, generate-swagger]
    options:
      cache: false
      interactive: true
      mergeOutputs: replace
      outputStyle: buffer
      mergeArgs: replace
      envFile: ".env"

  build:
    env:
      LDFLAGS_BUILD_HASH: "-X $project/internal.BuildHash=$vcsRevision"
      LDFLAGS_BUILD_DATE: "-X $project/internal.BuildDate=$datetime"
      LDFLAGS_STATIC: "-w -s -extldflags '-static'"
    script: |
      go build -tags prod -trimpath -buildmode=pie -buildvcs=false \
        --ldflags="$LDFLAGS_STATIC $LDFLAGS_BUILD_DATE $LDFLAGS_BUILD_HASH \
        -X $project/internal.Version=$(jq -r .version <$workspaceRoot'/package.json')" \
        -o $projectRoot/build/release/$project $projectRoot/cmd/
    deps: [tidy, generate-swagger]
    options:
      mergeArgs: append
      envFile: ".env"

  start:
    command: "build/release/$project"
    args: ["serve"]
    deps: [kill-port]
    options:
      cache: false
      outputStyle: buffer
      mergeArgs: replace
      envFile: ".env"

  test:
    command: "gotestsum --format short-verbose --"
    args: ["-count=1", "-v", "./internal/...", "./modules/...", "./pkg/..."]
    deps: ["tidy"]
    options:
      cache: false
      runFromWorkspaceRoot: false
      mergeOutputs: replace
      outputStyle: buffer
      mergeArgs: replace
      envFile: ".env"

  coverage:
    script: |
      gotestsum --format testname -- -coverprofile=build/coverage.out ./internal/... ./modules/... ./pkg/...
      go tool cover -html=$projectRoot/build/coverage.out -o $projectRoot/build/coverage.html
      go tool cover -func=$projectRoot/build/coverage.out | tail -1
    deps: ["tidy"]
    options:
      shell: true
      cache: false
      runFromWorkspaceRoot: false
      mergeOutputs: replace
      outputStyle: buffer
      mergeArgs: replace
      envFile: ".env"

  format:
    command: "gofmt -s -w $projectRoot"
    options:
      envFile: ".env"
      cache: false

  tidy:
    command: "go mod tidy"

  kill-port:
    # This is a hack for killing the listen port before starting the app
    command: "pnpm --package=kill-port-process-cli dlx kill-port {{ port_number }}"
    deps: [tidy]
    options:
      envFile: ".env"
      internal: true
      outputStyle: none

  docker-build:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')"
      docker build -f $projectRoot/Dockerfile . -t $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION \
      && docker image list --filter reference=$DOCKER_IMAGE\\*
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      interactive: false
      outputStyle: buffer-only-failure
      runInCI: false
      cache: false
      shell: true

  docker-run:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      docker run --network=host --rm -it --env-file $projectRoot/.env \
        --name $DOCKER_IMAGE $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      outputStyle: buffer-only-failure
      runFromWorkspaceRoot: true
      interactive: false
      runInCI: false
      cache: false
      shell: true

  docker-shell:
    script: |
      DOCKER_IMAGE="$(jq -r .name <$workspaceRoot'/package.json')-$project" \
      DOCKER_IMAGE_VERSION="$(jq -r .version <$workspaceRoot'/package.json')" \
      docker run --network=host --rm -it --env-file $projectRoot/.env \
        --entrypoint /bin/sh $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      outputStyle: buffer-only-failure
      interactive: false
      runInCI: false
      cache: false
      shell: true

  dump:
    script: |
      mkdir -p $workspaceRoot/tmp/db_dump
      DUMP_FILENAME="$project-$(date -u +%y%m%d_%H%M%S)"

      docker-compose -f $workspaceRoot/compose.yaml exec pgsql pg_dump -Fp --no-acl \
        --no-owner --no-privileges -U postgres --schema=public --schema-only \
        postgres > $workspaceRoot/tmp/db_dump/$DUMP_FILENAME-schema_only.sql

      docker-compose -f $workspaceRoot/compose.yaml exec pgsql pg_dump -Fp --no-acl \
        --no-owner --no-privileges -U postgres --schema=public \
        postgres > $workspaceRoot/tmp/db_dump/$DUMP_FILENAME-with_data.sql
    options:
      mergeEnv: replace
      runFromWorkspaceRoot: true
      outputStyle: buffer-only-failure
      interactive: false
      runInCI: false
      cache: false
      shell: true

  install-mockery:
    command: "$workspaceRoot/.moon/scripts/install_mockery.sh v3.5.1"
    options:
      shell: true
      outputStyle: buffer-only-failure
      interactive: true
      runInCI: false
      cache: false

  generate-swagger:
    command: >
      swag init -o $projectRoot/docs -d cmd,internal,modules --parseDependency
      && swag fmt --dir $projectRoot/docs
      && go mod tidy
    options:
      cache: false
      runFromWorkspaceRoot: false
      outputStyle: buffer-only-failure
      mergeOutputs: replace
      mergeArgs: replace
      envFile: ".env"

  generate-mock:
    # command: "docker run --network=host --rm -it --env-file $projectRoot/.env -v $projectRoot:/src -w /src vektra/mockery:3mockery"
    command: 'mockery'
    options:
      cache: false
      runFromWorkspaceRoot: false
      outputStyle: buffer-only-failure
      mergeOutputs: replace
      mergeArgs: replace
      envFile: ".env"
