- name: Hardening swarm ubuntu server
  hosts: swarm
  become: yes
  vars:
    new_user: {{ os_user | snake_case }}
    ssh_public_key: "{% raw %}{{ lookup('file', '~/.ssh/id_rsa.pub') }}{% endraw %}"
    timeout_seconds: {{ ssh_idle_timeout }}
    ssh_log_file: /var/log/ssh-attempts.log
    ssh_audit_file: /var/log/ssh-audit.log

  tasks:
    - name: Update SSH configuration
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: "{% raw %}{{ item.regexp }}{% endraw %}"
        line: "{% raw %}{{ item.line }}{% endraw %}"
        state: present
        validate: 'sshd -t -f %s'
      with_items:
        - regexp: "^PasswordAuthentication"
          line: "PasswordAuthentication no"
        - regexp: "^PermitRootLogin"
          line: "PermitRootLogin no"
      notify: restart sshd

    - name: Ensure rsyslog is installed
      apt:
        name: rsyslog
        state: present
        update_cache: yes

    - name: Enable and start rsyslog
      service:
        name: rsyslog
        state: started
        enabled: yes

    - name: Create SSH attempts log file
      file:
        path: "{% raw %}{{ ssh_log_file }}{% endraw %}"
        state: touch
        owner: syslog
        group: adm
        mode: '0640'

    - name: Create SSH audit log file
      file:
        path: "{% raw %}{{ ssh_audit_file }}{% endraw %}"
        state: touch
        owner: syslog
        group: adm
        mode: '0640'

    - name: Configure main rsyslog configuration
      lineinfile:
        path: /etc/rsyslog.conf
        regexp: "{% raw %}{{ item.regexp }}{% endraw %}"
        line: "{% raw %}{{ item.line }}{% endraw %}"
        state: present
      with_items:
        - regexp: "^\\$ModLoad imuxsock"
          line: "$ModLoad imuxsock"
        - regexp: "^\\$SystemLogSocketName"
          line: "$SystemLogSocketName /dev/log"
      notify: restart rsyslog

    - name: Configure rsyslog for detailed SSH logging
      blockinfile:
        path: /etc/rsyslog.d/10-ssh-logging.conf
        create: yes
        block: |
          # Enable high precision timestamps
          $ModLoad imuxsock
          $SystemLogSocketName /dev/log

          # Disable buffering
          $ActionQueueType Direct
          $SystemLogRateLimitInterval 0
          $SystemLogRateLimitBurst 0

          # SSH logging rules
          :programname, isequal, "sshd" {
            # Log everything to attempts file
            action(
              type="omfile"
              file="{% raw %}{{ ssh_log_file }}{% endraw %}"
              flushOnTXEnd="on"
              ioBufferSize="1"
            )

            # Log specific events to audit file
            if $msg contains "Failed password" or $msg contains "Accepted" or $msg contains "Invalid user" then {
              action(
                type="omfile"
                file="{% raw %}{{ ssh_audit_file }}{% endraw %}"
                template="RSYSLOG_TraditionalFileFormat"
                flushOnTXEnd="on"
                ioBufferSize="1"
              )
            }
            stop
          }
      notify: restart rsyslog

    - name: Create log rotation configuration
      copy:
        dest: /etc/logrotate.d/ssh-monitoring
        content: |
          {% raw %}{{ ssh_log_file }}{% endraw %} {
              rotate 7
              daily
              compress
              missingok
              notifempty
              create 0640 syslog adm
          }
          {% raw %}{{ ssh_audit_file }}{% endraw %} {
              rotate 7
              daily
              compress
              missingok
              notifempty
              create 0640 syslog adm
          }

    - name: Create SSH monitoring script
      copy:
        dest: /usr/local/bin/ssh-monitor
        mode: '0755'
        content: |
          #!/bin/bash

          echo "=== SSH Activity Report ==="
          echo "Generated at: $(date)"
          echo

          echo "=== Authentication Statistics ==="
          echo "Successful logins in the last 24 hours:"
          grep "Accepted" {% raw %}{{ ssh_audit_file }}{% endraw %} | grep "$(date +%Y-%m-%d)" | wc -l

          echo "Failed attempts in the last 24 hours:"
          grep "Failed password" {% raw %}{{ ssh_audit_file }}{% endraw %} | grep "$(date +%Y-%m-%d)" | wc -l

          echo
          echo "=== Top 10 IP Addresses (Failed Attempts) ==="
          grep "Failed password" {% raw %}{{ ssh_audit_file }}{% endraw %} | grep -oE "from ([0-9]{1,3}\.){3}[0-9]{1,3}" | cut -d' ' -f2 | sort | uniq -c | sort -nr | head -10

          echo
          echo "=== Recent Successful Logins ==="
          grep "Accepted" {% raw %}{{ ssh_audit_file }}{% endraw %} | tail -5

          echo
          echo "=== Recent Failed Attempts ==="
          grep "Failed password" {% raw %}{{ ssh_audit_file }}{% endraw %} | tail -5

          echo
          echo "=== Invalid Users ==="
          grep "Invalid user" {% raw %}{{ ssh_audit_file }}{% endraw %} | awk '{print $8}' | sort | uniq -c | sort -nr | head -10

          echo
          echo "=== Hourly Attempt Distribution ==="
          grep "Failed password" {% raw %}{{ ssh_audit_file }}{% endraw %} | awk '{print $1}' | cut -d: -f2 | sort | uniq -c | awk '{printf "%02d:00 - %02d:00: %s attempts\n", $2, ($2+1)%24, $1}'

          echo
          echo "=== Username Statistics ==="
          echo "Top 10 attempted usernames:"
          grep "Failed password" {% raw %}{{ ssh_audit_file }}{% endraw %} | awk '{print $9}' | sort | uniq -c | sort -nr | head -10

    - name: Add cron job for daily SSH summary
      cron:
        name: "Daily SSH summary"
        minute: "0"
        hour: "0"
        job: "/usr/local/bin/ssh-monitor > /var/log/ssh-daily-summary.log"
        user: root

    - name: Create the 'wheel' group
      group:
        name: wheel
        state: present

    - name: Create user accounts
      user:
        name: "{% raw %}{{ new_user }}{% endraw %}"
        shell: /bin/bash
        groups: wheel
        state: present

    - name: Add new user to the docker group
      command: sudo usermod -aG docker {% raw %}{{ new_user }}{% endraw %}

    - name: Add authorized keys
      authorized_key:
        user: "{% raw %}{{ new_user }}{% endraw %}"
        key: "{% raw %}{{ ssh_public_key }}{% endraw %}"

    - name: Grant sudo privileges to the new user
      lineinfile:
        dest: /etc/sudoers
        line: "%wheel ALL=(ALL) NOPASSWD:ALL"
        insertafter: EOF
        validate: 'visudo -cf %s'

    - name: Add TMOUT environment variable to /etc/profile
      lineinfile:
        path: /etc/profile
        line: "{% raw %}{{ item }}{% endraw %}"
        state: present
      with_items:
        - "TMOUT={% raw %}{{ timeout_seconds }}{% endraw %}"
        - "readonly TMOUT"
        - "export TMOUT"

    - name: Add TMOUT settings to bash.bashrc
      lineinfile:
        path: /etc/bash.bashrc
        line: "{% raw %}{{ item }}{% endraw %}"
        state: present
      with_items:
        - "TMOUT={% raw %}{{ timeout_seconds }}{% endraw %}"
        - "readonly TMOUT"
        - "export TMOUT"

    - name: Add cron job for docker system prune
      cron:
        name: "Docker system prune"
        minute: "0"
        hour: "*/3"
        job: "docker system prune -af --volumes"
        user: "{% raw %}{{ new_user }}{% endraw %}"

    - name: Disable Ubuntu user
      command: usermod -L -e 1 ubuntu

  handlers:
    - name: restart sshd
      systemd:
        name: sshd
        state: restarted
        daemon_reload: yes
      become: yes

    - name: restart rsyslog
      systemd:
        name: rsyslog
        state: restarted
        daemon_reload: yes
      become: yes
      notify: verify rsyslog restart

    - name: verify rsyslog restart
      shell: |
        # Wait for rsyslog to fully start
        sleep 2
        # Test logging
        logger -t sshd "Test message after rsyslog restart"
        sleep 1
        if ! grep -q "Test message after rsyslog restart" {% raw %}{{ ssh_log_file }}{% endraw %}; then
          echo "Warning: Logs are not being written properly after restart"
          exit 1
        fi
      become: yes
